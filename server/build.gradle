import java.text.SimpleDateFormat
/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'horac' at '10/24/16 4:31 PM' with Gradle 3.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.1/userguide/tutorial_java_projects.html
 */
plugins {
  id 'com.github.johnrengelman.shadow' version '2.0.1'
  id "com.jfrog.bintray" version "1.4"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: "maven-publish"

sourceCompatibility = 1.7
targetCompatibility = 1.7

def quantumVersion = getVersionName()
group = 'io.warp10'
archivesBaseName = "warp10-quantum-server"

// ------------------------------------------------------------------
//                    AUTO RELEASE MANAGEMENT
// Gets the version name from the latest Git tag
// if no commit occurs -> the name of the tag likes 0.0.1
// if commit occurs -> 0.0.1-12-aabb1122 (number of commits + version number)
// ------------------------------------------------------------------
def getVersionName(String revision) {
    if (null != revision) {
      if (revision.endsWith('SNAPSHOT')) {
        return revision;
      }
    }

    def stdout = new ByteArrayOutputStream()
      exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
      }
     return stdout.toString().trim();
}

//
// Check local git repo is synced with the remote
//
def isGitRepoSynced() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'status', '-u', 'no', '--porcelain'
        standardOutput = stdout
    }

    //
    // Exclude gradle.properties
    //
    String val = stdout.toString().replaceAll(/.*\/gradle.properties\n/, '')

    return (0 == val.trim().size())
}

gradle.taskGraph.whenReady { graph ->
  println "building warp10-quantum version=$quantumVersion"
  if (graph.hasTask(bintrayUpload)) {
    if (!isGitRepoSynced()) {
      throw new GradleException("Cannot upload archive: local repo contains uncommited files (git status -u no --porcelain)")
    }
  }
}

shadowJar {
  manifest {
    attributes(
      'Implementation-Title': "warp10-quantum",
      'Implementation-Vendor': "Warp 10",
      'Implementation-Version': quantumVersion,
      'Main-Class': 'io.warp10.quantum.Main'
    )
  }
  relocate 'org', 'io.warp10.quantum.org'
  relocate 'jetty', 'io.warp10.quantum.jetty'
  relocate 'javax', 'io.warp10.quantum.javax'
  classifier = null
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    compile 'org.slf4j:slf4j-simple:1.7.21'


    // https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-server
    compile 'org.eclipse.jetty:jetty-server:9.3.13.v20161014'

    // https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-servlet
    compile 'org.eclipse.jetty:jetty-servlet:9.3.13.v20161014'

    // https://mvnrepository.com/artifact/org.eclipse.jetty.http2/http2-server
    compile 'org.eclipse.jetty.http2:http2-server:9.3.13.M0'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

publishing {
  publications {
    Quantum(MavenPublication) {
      artifact shadowJar {
        extension = 'jar'
      }
      groupId 'io.warp10'
      artifactId archivesBaseName
      version quantumVersion
    }
  }
}

// DEPLOY ON BINTRAY
bintray {
  user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
  key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

  dryRun = false

  publications = ['Quantum']

  pkg {
    repo = 'generic'
    name = 'quantum'
    licenses = ['Apache-2.0']
    vcsUrl = 'https://github.com/cityzendata/warp10-quantum.git'
    version {
      name = quantumVersion
      released  = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZZ").format(new Date())
      vcsTag = quantumVersion
    }
  }
}

artifacts {
  archives shadowJar
}
